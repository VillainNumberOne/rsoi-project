version: "3"
services:
  postgres:
    image: library/postgres:15
    container_name: postgres
    restart: on-failure
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: "postgres"
      POSTGRES_DB: postgres
    volumes:
      # - db-data:/var/lib/postgresql/data
      - ./postgres/:/docker-entrypoint-initdb.d/
    ports:
      - "5432:5432"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka-1
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper

# TODO добавить сервисы

  identityprovider:
    build:
      dockerfile: Dockerfile
      context: library_system/identity_provider/
    volumes:
      - ./library_system/identity_provider/api/:/code/api/
      - ./library_system/identity_provider/static/:/code/static/
      - ./library_system/identity_provider/identity_provider/:/code/identity_provider/
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - services_network 

  frontend:
    build:
      dockerfile: Dockerfile
      context: library_system/frontend/
    volumes:
      - ./library_system/frontend/interface/:/code/interface/
      - ./library_system/frontend/static/:/code/static/
      - ./library_system/frontend/frontend/:/code/frontend/
    ports:
      - "8010:8010"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - services_network 


  librarysystem:
    build:
      dockerfile: Dockerfile
      context: library_system/library_system/
    ports:
      - "8060:8060"
    volumes:
      - ./library_system/library_system/api/:/code/api/
      - ./library_system/library_system/library_system/:/code/library_system/
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - services_network

  ratingsystem:
    build:
      dockerfile: Dockerfile
      context: library_system/rating_system/
    ports:
      - "8050:8050"
    volumes:
      - ./library_system/rating_system/api/:/code/api/
      - ./library_system/rating_system/rating_system/:/code/rating_system/
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - services_network

  reservationsystem:
    build:
      dockerfile: Dockerfile
      context: library_system/reservation_system/
    ports:
      - "8070:8070"
    volumes:
      - ./library_system/reservation_system/api/:/code/api/
      - ./library_system/reservation_system/reservation_system/:/code/reservation_system/
    depends_on:
      postgres:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - services_network

  gateway:
    build:
      dockerfile: Dockerfile
      context: library_system/gateway/
    ports:
      - "8080:8080"
    volumes:
      - ./library_system/gateway/api/:/code/api/
      - ./library_system/gateway/gateway/:/code/gateway/
    depends_on:
      - librarysystem
      - reservationsystem
      - ratingsystem
    networks:
      - services_network

volumes:
  db-data: